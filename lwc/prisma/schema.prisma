// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  // previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique 
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  role          UserRole @default(USER)
  // sessions      Session[]
 
  // @@map("users")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  // @@map("accounts")
}

model VerificationToken {
  id String @id @default(uuid()) @map("_id")
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model PasswordResetToken {
  id String @id @default(uuid()) @map("_id")
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorToken {
  id String @id @default(uuid()) @map("_id")
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid()) @map("_id")

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Course{
  id String @id @default(uuid()) @map("_id") 
  userId String
  title String @db.String
  description String? @db.String
  imageUrl String? @db.String
  price Float?
  isPublished Boolean @default(false)

  categoryId String? 
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category{
  id String @id @default(uuid()) @map("_id") 
  name String @unique
  courses Course[]
}

model Attachment{
  id String @id @default(uuid()) @map("_id") 
  name String
  url String @db.String

  courseId String 
  course Course @relation(fields: [courseId], references: [id], onDelete:Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}

model Chapter{
  id String @id @default(uuid()) @map("_id")
  title String
  description String? @db.String
  videoUrl String? @db.String
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid()) @map("_id")
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields:[chapterId], references:[id], onDelete: Cascade)
}

//ChapterProgress
model UserProgress{
  id String @id @default(uuid()) @map("_id")
  userId String

  chapterId String
  chapter Chapter @relation(fields:[chapterId], references:[id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase{
  id String @id @default(uuid()) @map("_id")
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer{
  id String @id @default(uuid()) @map("_id")
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}